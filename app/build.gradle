apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    def disableCrashlytics = System.env.BRANCH_NAME == null
    disableCrashlytics || assertValidFabricProperties()

    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    flavorDimensions 'default'
    defaultConfig {
        applicationId "nu.yona.app"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode getNextVersionCode()
        versionName "1.1 build $System.env.BUILD_NUMBER" + (System.env.BRANCH_NAME == "master" ? "" : " ($System.env.BRANCH_NAME)")

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            lintOptions {
                disable 'MissingTranslation'
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("boolean", "DISABLE_CRASHLYTICS", "${disableCrashlytics}")
            ext.enableCrashlytics = !disableCrashlytics
        }
        debug {
            buildConfigField("boolean", "DISABLE_CRASHLYTICS", "${disableCrashlytics}")
            ext.enableCrashlytics = !disableCrashlytics
        }
    }

    dexOptions{
        jumboMode = true
    }

    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets']
        }
    }

    testOptions {
        //this keeps junit (without robolectric) from failing when calling Log.<whatever> or TextUtils.<whatever>
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    productFlavors {
        development {
            // this is for developer testing, do not send crash reports
        }
        production {
            // do nothing here, just merge in custom res
        }
    }

    signingConfigs {
        if (System.env.BRANCH_NAME) {
            release {
                storeFile file(System.getenv('YONA_KEYSTORE_PATH'))
                storePassword System.getenv('YONA_KEYSTORE_PASSWORD')
                keyAlias 'Yona'
                keyPassword System.getenv('YONA_KEY_PASSWORD')
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (System.env.BRANCH_NAME) {
                signingConfig signingConfigs.release
            }
        }
    }

    lintOptions {
        abortOnError false
    }
}

def assertValidFabricProperties() {
    def Properties fabricProps = new Properties()
    def propFile = file('fabric.properties')   //pay attention to the path
    if (propFile.canRead()){
        fabricProps.load(new FileInputStream(propFile))
    }
    if (!fabricProps.containsKey('apiKey') || !fabricProps.containsKey('apiSecret')) {
        throw new StopExecutionException("Invalid or missing fabric.properties file")
    }
}

def getNextVersionCode() {
    if (!System.env.BRANCH_NAME) {
        return 0;
    }

    def versionPropsFile = file("version.properties")
    def Properties versionProps = new Properties()

    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))
    }
    else {
        versionProps['VERSION_CODE']='0'
    }

    newVersionCode = versionProps['VERSION_CODE'].toInteger() + 1

    versionProps['VERSION_CODE']=newVersionCode.toString()
    versionProps.store(versionPropsFile.newWriter(), null)
}

dependencies {
    implementation project(':libTimepicker')
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation files('libs/commons-codec-1.10.jar')
    implementation files('libs/commons-io-2.4.jar')
    implementation files('libs/commons-lang3-3.4.jar')
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.8'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    testImplementation 'org.robolectric:shadows-support-v4:3.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.1.0'
    implementation 'com.android.support:design:27.1.0'
    implementation 'com.android.support:recyclerview-v7:27.1.0'
    implementation 'com.android.support:cardview-v7:27.1.0'
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation 'com.google.android.gms:play-services-analytics:9.2.0'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.squareup.retrofit2:retrofit:2.0.2'
    implementation 'com.squareup.okhttp3:okhttp:3.2.0'
    implementation 'com.google.code.gson:gson:2.4'
    implementation 'com.squareup.retrofit2:converter-gson:2.0.0'
    implementation 'joda-time:joda-time:2.9.3'
    //using for swipe layout on recyclerview
    implementation 'com.daimajia.swipelayout:library:1.2.0@aar'
    //using for sticky header recyclerview
    implementation 'com.timehop.stickyheadersrecyclerview:library:[0.4.3]@aar'
    implementation project(path: ':openvpn')
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.4.2'
    implementation 'com.theartofdev.edmodo:android-image-cropper:2.6.0'
    implementation 'de.hdodenhof:circleimageview:2.2.0'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.4@aar') {
        transitive = true;
    }
}
