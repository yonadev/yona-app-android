apply plugin: 'com.android.application'

android {
    def branchVersionCode = 0
	if (System.env.BRANCH_NAME) {
        def versionPropsFile = file("${System.env.BRANCH_NAME}.version.properties")
        def Properties versionProps = new Properties()

        if (versionPropsFile.canRead()) {
            versionProps.load(new FileInputStream(versionPropsFile))
        }
        else {
            versionProps['VERSION_CODE']='0'
        }

        branchVersionCode = versionProps['VERSION_CODE'].toInteger() + 1

        versionProps['VERSION_CODE']=branchVersionCode.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
	}

    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    flavorDimensions 'default'
    defaultConfig {
        applicationId "nu.yona.app"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode branchVersionCode
        versionName "1.1 build $System.env.BUILD_NUMBER" + (System.env.BRANCH_NAME == "master" ? "" : " ($System.env.BRANCH_NAME)")
    }
    buildTypes {
        release {
            lintOptions {
                disable 'MissingTranslation'
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions{
        jumboMode = true
    }

    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets']
        }
    }

    testOptions {
        //this keeps junit (without robolectric) from failing when calling Log.<whatever> or TextUtils.<whatever>
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    productFlavors {
        //build flavors:
        zdevelopment {
            // this is for developer testing, not send crash report on hocky app
        }
        zdev {
            //do nothing here, just merge in custom res - use this for QA Testing
        }
        zproduction {
            //do nothing here, just merge in custom res
        }
        zacceptance {
            //do nothing here, just merge in custom res
        }
        zuat {
        }
    }

    signingConfigs {
        release {
            storeFile file(System.getenv('YONA_KEYSTORE') + '/yona.jks')
            storePassword System.getenv('YONA_KEYSTORE_PASS')
            keyAlias System.getenv('YONA_KEYSTORE_ALIAS')
            keyPassword System.getenv('YONA_ALIAS_PASS')
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    android.defaultConfig.versionName = getVersionString()
    android.defaultConfig.versionCode = Integer.valueOf(getBuildNumber())

    lintOptions {
        abortOnError false
    }
}

def getAppName() {
    def appName
    if ('APP_NAME' in project.ext.properties) {
        appName = project.ext.properties['APP_NAME']
    } else {
        appName = "Yona"
    }
}

def getBuildNumber() {
    def buildNumber

    if ('BUILD_NUMBER' in project.ext.properties) {
        buildNumber = project.ext.properties['BUILD_NUMBER']
    } else {
        buildNumber = "13"
    }
    return buildNumber
}

def getVersionString() {
    def versionString

    if ('VERSION_STRING' in project.ext.properties) {
        versionString = project.ext.properties['VERSION_STRING']
    } else {
        versionString = android.defaultConfig.versionName ?: "0.0.1"
    }
    return versionString
}


def getBranch() {
    def branch

    if ('BRANCH' in project.ext.properties) {
        branch = project.ext.properties['BRANCH']
    } else {
        branch = "develop"
    }

    return branch
}

dependencies {
    implementation project(':libTimepicker')
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation files('libs/commons-codec-1.10.jar')
    implementation files('libs/commons-io-2.4.jar')
    implementation files('libs/commons-lang3-3.4.jar')

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.0'

    implementation 'com.android.support:design:27.1.0'
    implementation 'com.android.support:recyclerview-v7:27.1.0'
    implementation 'com.android.support:cardview-v7:27.1.0'
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation 'com.google.android.gms:play-services-analytics:9.2.0'
    implementation 'com.squareup.picasso:picasso:2.5.2'

    implementation 'com.squareup.retrofit2:retrofit:2.0.2'
    implementation 'com.squareup.okhttp3:okhttp:3.2.0'
    implementation 'com.google.code.gson:gson:2.4'
    implementation 'com.squareup.retrofit2:converter-gson:2.0.0'
    implementation 'joda-time:joda-time:2.9.3'
    //using for swipe layout on recyclerview
    implementation 'com.daimajia.swipelayout:library:1.2.0@aar'
    //using for sticky header recyclerview
    implementation 'com.timehop.stickyheadersrecyclerview:library:[0.4.3]@aar'
    implementation project(path: ':openvpn')
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.4.2'
    implementation 'com.theartofdev.edmodo:android-image-cropper:2.6.0'
    implementation 'de.hdodenhof:circleimageview:2.2.0'
}
